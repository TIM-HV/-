/*    Харитонов Тимур */

/***************************************
14. * Автоморфные числа. Натуральное число называется автоморфным,
 если оно равно последним цифрам своего квадрата. Например, 25 \ :sup: ​ '2' = 625.
 Напишите программу, которая получает на вход натуральное число N и выводит на экран
 все автоморфные числа, не превосходящие N.

#include <iostream>
#include <stdlib.h>
#include <math.h>

using namespace std;

int main(int argc, char** args)
{
int N; //вводимое число
int n; // числовой ряд

cout << "Enter unsigned integer number:" << endl;
cin >> N;

   for(n=2; n<=N; n++) {  // перебираем числовой ряд от 0 до N
      int r=0; // начальная разрядность числа
       for(int k=1; k<n; k=k*10) {
         r=r+1;  // подсчитываем разрядность числа
           int devizor = pow(10,r); // фунция pow для действительных чисел,
                                    // а нам нужны целые
           if(((n*n)%devizor)==n) cout << "n= " << n << " n*n= " << n*n <<endl;

          if(n<(10*r)) continue; // если разрядность уже больше, выходим из цикла
           }
       //   cout << "n= " << n-1 << " r= " << r <<endl;
     }
 return 0;
}
************************************/


/*********************************************************
13. * Написать функцию, генерирующую случайное число от 1 до 100:
a. С использованием стандартной функции rand().
b. Без использования стандартной функции rand().

#include <iostream>
#include <stdlib.h>
#include <math.h>
#include <time.h>  // добавляем счётчик времени Си

using namespace std;

int main(int argc, char** args)
{
int R; // число создаваемое при помощи функции rand()

srand(time(NULL));
R=rand()%100;
cout << "R= " <<R << endl;

 // из методички стр. 24-25  без использования стандартной функции rand()
int x=1; // стартовое число
int a=2*time(NULL)%100;  // чуть усложнённый множитель
int b=3*time(NULL)%10;  // чуть усложнённое слагаемое
int m=100;
int M=100;
for(int i=0; i<M ; i=i+time(NULL)%100) {  // чуть усложнённая итерация
  x=(a*x+b)%m;   // т.н. линейный конгруэнтный метод ГСПЧ
    }
   cout << "x = " << x <<endl;  // вывод последнего числа из псевдослучайного ряда

 return 0;
}
************************************************************/


/*******************************************
12. Написать функцию нахождения максимального из трёх чисел.

#include <iostream>
#include <stdlib.h>

using namespace std;

int main(int argc, char** args)
{
int A, B, C, MAX;

cout << "Enter A: "; cin >> A;
cout << "Enter B: "; cin >> B;
cout << "Enter C: "; cin >> C;

  if(A>=B) MAX=A;
   else MAX=B;
if(C>MAX) MAX=C;

cout <<endl;
cout << "MAX = " << MAX << endl;

return 0;
}
************************************************/


/*******************************************
11. С клавиатуры вводятся числа, пока не будет введён 0. Подсчитать
среднее арифметическое всех положительных чётных чисел, оканчивающихся на 8.


#include <iostream>
#include <stdlib.h>

using namespace std;

int main(int argc, char** args) {

int A;
int S=0;
int j=0;

  for( int i = 1 ; A !=0 ; i++)  {
  cout << "Enter A: "; cin >> A;
    if(A%10==8) {
       S=S+A;
       j=j+1;
         }
    }
 if(j !=0) cout << "average of positive numbers ended by 8 = " << float(S/j) <<endl;

return 0;
}
******************************************/


/*************************************************
10. Дано целое число N > 0. С помощью операций деления нацело и взятия
 остатка от деления определить, имеются ли в записи числа N нечётные цифры.
 Если имеются, то вывести True, если нет – вывести False.



#include <iostream>
#include <stdlib.h>

using namespace std;

int main(int argc, char** args) {

int N;
cout << "Enter positive integer: "; cin >> N;

int R= -1; // в теле цикла значение R изменится либо на 0, либо на положительное
 if(N%2 != 0) cout << "TRUE" << endl; // если самая правая цифра нечётная
  else {
        do{
         N=N/10;
         R=N%10;
         if(R%2 != 0) {cout << " True" <<endl; break;}// т.е если правая цифра нечётная
       }while(N>=1);
    }
  if(R==0) cout << " False"<<endl;
return 0;
}
**************************************************/
